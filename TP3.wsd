@startuml TP3_PerfectCell
' Pueden utilizar https://plantuml-editor.kkeisuke.com/ para copiar y pegar el codigo. 
' La pagina tiene cheatsheet para ver la sintaxis. 
skinparam SequenceMessageAlignment center
class Almacen{
    + Almacen(ruta: string): Almacen
    + cargar_materiales(ruta: string): void
 	+ buscar_material(string a_buscar): int
    + modificar_cantidad_material(string a_cambiar, int cantidad): void
	+ mostrar_materiales(): void 
    + guardar_materiales(string ruta): bool
    + hay_material_suficiente(Material material): bool
    + hay_lista_materiales(Lista<Material>* materiales_consutlados): Resultado_Chequeos
    + restar_lista_materiales(Lista<Material>* materiales_usados): void
 	+ sumar_lista_materiales(Lista<Material>* materiales_obtenidos, bool recuperados = false): void
    - agregar_material(Material material, int posicion): void

}

abstract class Casillero{
	 # color: string
 	+ {abstract} saludar(): void
 	+ {abstract} es_casillero_transitable() : bool
 	+ {abstract} es_casillero_construible() : bool
	+ {abstract} esta_ocupado(): bool
	+ {abstract} obtener_contenido(): string
 	+ obtener_color():string
}

class Edificio{
	- nombre: string
    - materiales[CANT_MATERIALES_EDIFICIOS]: int
	- maximo_permitidos: int
	- construidos: int

 	+ Edificio(nombre: string, piedra: int, madera: int, metal: int, maximo_permitidos: int): Edificio
    + obtener_nombre(): string
	+ obtener_cant_material(string material):int
    + obtener_max_permitidos():int
	+ {abstract} es_productor():bool
    + {abstract} saludar():void
    + vacio():bool
	+ {abstract} producir_material():Material
	+ modificar_construidos(int n):void
    + obtener_construidos():int

}
class EmpresaConstructora{
    - almacen: Almacen*
    - planos: Planos*
	- mapa: Mapa*
	+Empresa_Constructora(ruta_materiales: string, ruta_edificios: string, ruta_mapa: string, ruta_ubicaiones: string);
	+ construir_edificio(): void
    + demoler_edificio(): void
	+ mostrar_edificios(): void
	+ mostrar_materiales(): void
	+ mostrar_mapa(): void
	+ mostrar_coordenada(): void
	+ mostrar_construidos(): void
	+ guardar_archivos(ruta_materiales: string, ruta_ubicaciones: string): void
    + producir_recursos(): void
    + lluvia_de_recursos(): void
    + vaciar_materiales(): void
    -cargar_ubicaciones(ruta: string): void
	-guardar_ubicaciones(ruta: string): void
    -sumar_contenido(linea: string, fila: int, columna: int): void
	-pedir_edificio(): string
	-Resultado_Chequeos chequeo_construir(edificio_ingresado: string, edificio: &string): Resultado_Chequeos 
	-chequeo_demoler(fila_ingresada: string, columna_ingresada: string, fila: int &, columna: int &, edificio: string &): Resultado_Chequeos
	-chequeo_posicion_libre(fila_ingresada: string, columna_ingresada: string, fila: int &, columna: int &): Resultado_Chequeos
	-chequeo_posicion( fila_ingresada: string,  columna_ingresada: string,  fila: &int, columna: &int): bool
	-mostrar_mensaje_chequeo(Resultado_Chequeos chequeo): string
	-pedir_si_no();
	-pedir_posicion_libre( &fila: int,  &columna: int): bool
	-pedir_posicion_ocupada( &fila: int,  &columna: int): string
	-pedir_posicion( &fila: int,  &columna: int): void
    -edificio_construido_confirmado( edificio: string,  fila: int,  columna: int): void
}
class Planos{
    + Planos(string ruta);
	+  cargar_edificios(string ruta): void
 	+  mostrar_edificios(): void
	+  es_edificio_valido(string edificio): bool
	+  cant_max_edificio(string edificio): int
    +  cant_construidos(string edificio): int
    +  materiales_necesarios(string edificio): lista_material
	+ aumentar_construidos_edificio(string edificio): void
	+ disminuir_construidos_edificio(string edificio): void
	+ check_construir_edificio(string edificio): Resultado_Chequeos
	+ obtener_recursos_producidos(): lista_material
	- agregar_edificio(Edificio* edificio, int posicion): void
	- material_producido(Edificio* edificio): string
	- mostrar_materiales_producidos(Lista<Material>* listado): void
}

class Mapa{
	- filas: int
    - columnas: int

	+Mapa(string ruta);
    +es_cordenada_valida(int fila, int columna): bool
    + chequeo_ubicar_edificio(int fila, int columna): Resultado_Chequeos
	+ chequeo_demoler_edificio(int fila, int columna, string &edificio): Resultado_Chequeos
    + mostrar_mapa(): void
    + mostrar_construidos(): void
	+ mostrar_posicion(int fila, int columna): void
	+ construir_edificio_ubicacion(string edificio, int fila, int columna): void
    + demoler_edificio_ubicacion(int fila, int columna): string
    + poner_material_ubicacion(string material, int fila, int columna): void
    + sacar_material_ubicacion(int fila, int columna): string
	+ chequeo_poner_material(int fila, int columna): Resultado_Chequeos
	+ chequeo_sacar_material(int fila, int columna): Resultado_Chequeos
	+ obtener_contenido_ubicacion(int fila, int columna): string
	+ generar_materiales_aleatorios(): bool
	+ vaciar_materiales(): void
    - agregar_edificio_a_listas(Casillero* casillero, int* coordenadas, Lista<string> &lista_nombres, Lista<Lista<int*>*> &lista_coordenadas): void
	- mostrar_edificios(Lista<string> &lista_nombres, Lista<Lista<int*>*> &lista_coordenadas): void
	- cargar_terreno(string ruta): void
	- iniciar_filas_casilleros(int filas, string lectura): void
	- identificador_ocupados(string ocupador): string
	- casilleros_libres_transitables(): int
	- numero_aleatorio(int minimo, int maximo): int
	- generar_material(string material, int numero_casillero): void
}

class Material{
	+ Material(string nombre, int cantidad): Material
	+ obtener_nombre(): string
	+ obtener_cantidad(): int
	+ cambiar_nombre(string nombre): void
	+ cambiar_cantidad(int cantidad): void
	+ saludar(): void
}

class Programa{
	+ mostrar_menu(): void
	+ procesar_opcion(int opcion_elegida): bool
	+ es_opcion_valida(string opcion): bool
	+ limpiar_pantalla(): void
	+ guardar_archivos(string ruta_materiales, string ruta_ubicaciones): void
}

class Productor{
	+ info_producto(): string
    + producir_material(): Material
}
class NoProductor{
	+ info_producto(): string
    + producir_material(): Material
}

' RELACIONES '
Programa *-- EmpresaConstructora: - empresa_constructora

EmpresaConstructora *-- Planos: - planos
EmpresaConstructora *-- Almacen: - almacen
EmpresaConstructora *-- Mapa: - mapa

Almacen *--"*" Material: - lista_material
Planos *--"*" Edificio: - lista_edificios
Mapa *--"*" Casillero: - terreno

Casillero <|-- CasilleroConstruible
Casillero <|-- CasilleroTransitable
Casillero <|-- CasilleroInaccesible

Edificio <|-- NoProductor
Edificio <|-- Productor

Productor *-- Material: - producto

Productor <|-- Aserradero
Productor <|-- Escuela
Productor <|-- Fabrica
Productor <|-- Mina
Productor <|-- MinaOro
Productor <|-- PlantaElectrica
NoProductor <|-- Obelisco

@enduml